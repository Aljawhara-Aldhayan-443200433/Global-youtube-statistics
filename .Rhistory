library(caret)
library(factoextra)
library(cluster)
library(tidyverse)
library(gridExtra)
options(max.print=9999999)
dataset=read.csv("Dataset/vgsales.csv")
nrow(dataset)
ncol(dataset)
dim(dataset)
names(dataset)
str(dataset)
head(dataset, 10)
tail(dataset, 10)
summary(dataset)
var(dataset$NA_Sales)
var(dataset$EU_Sales)
var(dataset$JP_Sales)
var(dataset$Other_Sales)
var(dataset$Global_Sales)
dataset2 <- dataset %>% sample_n(50)
tab <- dataset2$Platform %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100
txt <- paste0(names(tab), '\n', precentages, '%')
pie(tab, labels=txt , main = "Pie chart of Platform")
# coloring barplot and adding text
tab<-dataset$Genre %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Genre %>% table() %>% barplot(axisnames=F, main = "Barplot for Popular genres ",ylab='count',col=c('pink','blue','lightblue','green','lightgreen','red','orange','red','grey','yellow','azure','olivedrab'))
text(bb,tab/2,labels=txt,cex=1.5)
boxplot(dataset$NA_Sales , main="
BoxPlot for NA_Sales")
boxplot(dataset$EU_Sales, main="
BoxPlot for EU_Sales")
boxplot(dataset$JP_Sales , main="
BoxPlot for JP_Sales")
boxplot(dataset$Other_Sales , main="
BoxPlot for Other_Sales")
boxplot(dataset$Global_Sales , main="BoxPlot for Global_Sales")
qplot(data = dataset, x=Global_Sales,y=Genre,fill=I("yellow"),width=0.5 ,geom = "boxplot" , main = "BoxPlots for genre and Global_Sales")
dataset$Year %>% table() %>% barplot( main = "Barplot for year")
pairs(~NA_Sales + EU_Sales + JP_Sales + Other_Sales + Global_Sales, data = dataset,
main = "Sales Scatterplot")
dataset$Rank=as.character(dataset$Rank)
sum(is.na(dataset$Rank))
NullRank<-dataset[dataset$Rank=="N/A",]
NullRank
sum(is.na(dataset$Name))
NullName<-dataset[dataset$Name=="N/A",]
NullName
sum(is.na(dataset$Platform))
NullPlatform<-dataset[dataset$Platform=="N/A",]
sum(is.na(dataset$Year))
NullYear<-dataset[dataset$Year=="N/A",]
NullYear
sum(is.na(dataset$Genre))
NullGenre<-dataset[dataset$Genre=="N/A",]
NullGenre
sum(is.na(dataset$Publisher))
NullPublisher<-dataset[dataset$Publisher=="N/A",]
NullPublisher
sum(is.na(dataset$NA_Sales))
NullNA_Sales<-dataset[dataset$NA_Sales=="N/A",]
NullNA_Sales
sum(is.na(dataset$EU_Sales))
NullEU_Sales<-dataset[dataset$EU_Sales=="N/A",]
NullEU_Sales
sum(is.na(dataset$JP_Sales))
NullJP_Sales<-dataset[dataset$JP_Sales=="N/A",]
NullJP_Sales
sum(is.na(dataset$Other_Sales))
NullOther_Sales<-dataset[dataset$Other_Sales=="N/A",]
sum(is.na(dataset$Global_Sales))
NullGlobal_Sales<-dataset[dataset$Global_Saless=="N/A",]
dataset$Platform=factor(dataset$Platform,levels=c("2600","3DO","3DS","DC","DS","GB","GBA","GC","GEN","GG","N64","NES","NG","PC","PCFX","PS","PS2","PS3","PS4","PSP","PSV","SAT","SCD","SNES","TG16","Wii","WiiU","WS","X360","XB","XOne"), labels=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
dataset$Genre=factor(dataset$Genre,levels=c("Action","Adventure","Fighting","Platform","Puzzle","Racing","Role-Playing","Shooter","Simulation","Sports","Strategy","Misc"),labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
OutNA_Sales = outlier(dataset$NA_Sales, logical =TRUE)
sum(OutNA_Sales)
Find_outlier = which(OutNA_Sales ==TRUE, arr.ind = TRUE)
OutEU_Sales = outlier(dataset$EU_Sales, logical =TRUE)
sum(OutEU_Sales)
Find_outlier = which(OutEU_Sales ==TRUE, arr.ind = TRUE)
OutJP_Sales = outlier(dataset$JP_Sales, logical =TRUE)
sum(OutJP_Sales)
Find_outlier = which(OutJP_Sales ==TRUE, arr.ind = TRUE)
OutOS=outlier(dataset$Other_Sales, logical=TRUE)
sum(OutOS)
Find_outlier=which(OutOS==TRUE, arr.ind=TRUE)
OutGS=outlier(dataset$Global_Sales, logical=TRUE)
sum(OutGS)
Find_outlier=which(OutGS==TRUE, arr.ind=TRUE)
dataset= dataset[-Find_outlier,]
datsetWithoutNormalization<-dataset
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
dataset$NA_Sales<-normalize(datsetWithoutNormalization$NA_Sales)
dataset$EU_Sales<-normalize(datsetWithoutNormalization$EU_Sales)
dataset$JP_Sales<-normalize(datsetWithoutNormalization$JP_Sales)
dataset$Other_Sales<-normalize(datsetWithoutNormalization$Other_Sales)
dataset$Global_Sales<-normalize(datsetWithoutNormalization$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- data.frame(cbind(variable = rownames(roc_imp), score = roc_imp[,1]))
roc_imp$score <- as.double(roc_imp$score)
roc_imp[order(roc_imp$score,decreasing = TRUE),]
dataset<- dataset[,-9]
datasetClustering<- dataset
View(datasetClustering)
print(dataset)
# We stored the class label in a varible just in case of further need(We need it to compute Bcubed precision and recall)
classLabel<-dataset$Global_Sales
# Removing the classLabel before the clustring process
datasetClustering<- datasetClustering[,-10]
# We removed columns that are not relevant to the clustering process and can distort the result
datasetClustering <- datasetClustering[, setdiff(3:9, c(4, 6))]
View(datasetClustering)
# We removed columns that are not relevant to the clustering process and can distort the result
datasetClustering <- datasetClustering[, setdiff(3:9, c(4, 6))]
##converting factors to numric to apply kmeans method , it's essential to convert factor variables to numeric ones due to the algorithmic requirements of K-means and the characteristics of factor variables.
datasetClustering$Platform <- as.numeric(as.character(datasetClustering$Platform))
datasetClustering$Genre <- as.numeric(as.character(datasetClustering$Genre))
View(datasetClustering)
fviz_nbclust(datasetClustering, kmeans, method = "silhouette")+labs(subtitle = "Silhouette method")
fviz_nbclust(datasetClustering, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
set.seed(5000)
kmeans.result <- kmeans(datasetClustering, 3)
# print the clusterng result
kmeans.result
# visualize clustering
library(factoextra)
fviz_cluster(kmeans.result, data = datasetClustering)
#average silhouette for cluster  k=3
library(cluster)
avg_sil <- silhouette(kmeans.result$cluster,dist(datasetClustering))
fviz_silhouette(avg_sil)
#BCubed
kmeans_cluster <- c(kmeans.result$cluster)
ground_truth <- c(classLabel)
data <- data.frame(cluster = kmeans_cluster, label = ground_truth)
# Function to calculate BCubed precision and recall
bcubed <- function(data) {
n <- nrow(data)
total_precesion <- 0
total_recall <- 0
for (i in 1:n) {
cluster <- data$cluster[i]
label <- data$label[i]
# Count the number of items from the same category within the same cluster
intersection <- sum(data$label[data$cluster == cluster] == label)
# Count the total number of items in the same cluster
total_same_cluster <- sum(data$cluster == cluster)
# Count the total number of items with the same category
total_same_category <- sum(data$label == label)
# Calculate precision and recall for the current item and add them to the sums
total_precesion <- total_precesion + intersection /total_same_cluster
total_recall <- total_recall + intersection / total_same_category
}
# Calculate average precision and recall
precision <- total_precesion / n
recall <- total_recall / n
return(list(precision = precision, recall = recall))
}
# Calculate BCubed precision and recall
metrics <- bcubed(data)
# Extract precision and recall from the metrics
precision <- metrics$precision
recall <- metrics$recall
# Print the results
cat("BCubed Precision:", precision, "\n")
cat("BCubed Recall:", recall, "\n")
set.seed(5000)
kmeans.result <- kmeans(datasetClustering, 4)
# print the clusterng result
kmeans.result
# visualize clustering
library(factoextra)
fviz_cluster(kmeans.result, data = datasetClustering)
#average silhouette for cluster  k=4
library(cluster)
avg_sil <- silhouette(kmeans.result$cluster,dist(datasetClustering))
fviz_silhouette(avg_sil)
#Within-cluster sum of squares wss
wss <- kmeans.result$tot.withinss
print(wss)
#BCubed
kmeans_cluster <- c(kmeans.result$cluster)
ground_truth <- c(classLabel)
data <- data.frame(cluster = kmeans_cluster, label = ground_truth)
# Function to calculate BCubed precision and recall
bcubed <- function(data) {
n <- nrow(data)
total_precesion <- 0
total_recall <- 0
for (i in 1:n) {
cluster <- data$cluster[i]
label <- data$label[i]
# Count the number of items from the same category within the same cluster
intersection <- sum(data$label[data$cluster == cluster] == label)
# Count the total number of items in the same cluster
total_same_cluster <- sum(data$cluster == cluster)
# Count the total number of items with the same category
total_same_category <- sum(data$label == label)
# Calculate precision and recall for the current item and add them to the sums
total_precesion <- total_precesion + intersection /total_same_cluster
total_recall <- total_recall + intersection / total_same_category
}
# Calculate average precision and recall
precision <- total_precesion / n
recall <- total_recall / n
return(list(precision = precision, recall = recall))
}
# Calculate BCubed precision and recall
metrics <- bcubed(data)
# Extract precision and recall from the metrics
precision <- metrics$precision
recall <- metrics$recall
# Print the results
cat("BCubed Precision:", precision, "\n")
cat("BCubed Recall:", recall, "\n")
set.seed(5000)
kmeans.result <- kmeans(datasetClustering, 6)
# print the clusterng result
kmeans.result
# visualize clustering
library(factoextra)
fviz_cluster(kmeans.result, data = datasetClustering)
#average silhouette for cluster  k=6
library(cluster)
avg_sil <- silhouette(kmeans.result$cluster,dist(datasetClustering))
fviz_silhouette(avg_sil)
#Within-cluster sum of squares wss
wss <- kmeans.result$tot.withinss
print(wss)
#BCubed
kmeans_cluster <- c(kmeans.result$cluster)
ground_truth <- c(classLabel)
data <- data.frame(cluster = kmeans_cluster, label = ground_truth)
# Function to calculate BCubed precision and recall
bcubed <- function(data) {
n <- nrow(data)
total_precesion <- 0
total_recall <- 0
for (i in 1:n) {
cluster <- data$cluster[i]
label <- data$label[i]
# Count the number of items from the same category within the same cluster
intersection <- sum(data$label[data$cluster == cluster] == label)
# Count the total number of items in the same cluster
total_same_cluster <- sum(data$cluster == cluster)
# Count the total number of items with the same category
total_same_category <- sum(data$label == label)
# Calculate precision and recall for the current item and add them to the sums
total_precesion <- total_precesion + intersection /total_same_cluster
total_recall <- total_recall + intersection / total_same_category
}
# Calculate average precision and recall
precision <- total_precesion / n
recall <- total_recall / n
return(list(precision = precision, recall = recall))
}
# Calculate BCubed precision and recall
metrics <- bcubed(data)
# Extract precision and recall from the metrics
precision <- metrics$precision
recall <- metrics$recall
# Print the results
cat("BCubed Precision:", precision, "\n")
cat("BCubed Recall:", recall, "\n")
# Assuming your data is already loaded and named 'datasetClustering'
# data(datasetClustering) # Use this if you need to load the dataset
# Modify the code to plot your columns against the clusters
plot1 <- datasetClustering %>%
ggplot(aes(x = cluster, y = Platform)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "Cluster", y="Platform")
plot2 <- datasetClustering %>%
ggplot(aes(x = cluster, y = Genre)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "orange") +
labs(x = "Cluster", y="Genre")
plot3 <- datasetClustering %>%
ggplot(aes(x = cluster, y = NA_Sales)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "green") +
labs(x = "Cluster", y="NA_Sales")
plot4 <- datasetClustering %>%
ggplot(aes(x = cluster, y = EU_Sales)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "purple") +
labs(x = "Cluster", y="EU_Sales")
plot5 <- datasetClustering %>%
ggplot(aes(x = cluster, y = Other_Sales)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "teal") +
labs(x = "Cluster", y="Other_Sales")
# If you have more columns, continue to create plots for them
# plot4, plot5, ...
# Arrange the plots in a grid
grid.arrange(plot1, plot2, plot3, plot4, plot5) # Add more plots if you have them
# Check the structure of 'datasetClustering' to see column types
str(datasetClustering)
# Assuming your data is already loaded and named 'datasetClustering'
# data(datasetClustering) # Use this if you need to load the dataset
# Modify the code to plot your columns against the clusters
plot1 <- datasetClustering %>%
ggplot(aes(x = "cluster", y = Platform)) +
geom_jitter(width = .025, height = 0, size = 2, alpha = .5, color = "blue") +
labs(x = "", y="Platform")
plot2 <- datasetClustering %>%
ggplot(aes(x = "cluster", y = Genre)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "orange") +
labs(x = "", y="Genre")
plot3 <- datasetClustering %>%
ggplot(aes(x = "cluster", y = NA_Sales)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "green") +
labs(x = "", y="NA_Sales")
plot4 <- datasetClustering %>%
ggplot(aes(x = "cluster", y = EU_Sales)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "purple") +
labs(x = "", y="EU_Sales")
plot5 <- datasetClustering %>%
ggplot(aes(x = "cluster", y = Other_Sales)) +
geom_jitter(width = .02, height = 0, size = 2, alpha = .6,  color = "teal") +
labs(x = "", y="Other_Sales")
# If you have more columns, continue to create plots for them
# plot4, plot5, ...
update.packages(ask = FALSE)
# Arrange the plots in a grid
grid.arrange(plot1, plot2, plot3, plot4, plot5) # Add more plots if you have them
library(GGally)
install.packages("GGally")
install.packages("plotly")
library(GGally)
library(plotly)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Apply the first clustering result to your dataset
datasetClustering$cluster <- as.factor(kmeans.result1$cluster)
library(GGally)
library(plotly)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Apply the first clustering result to your dataset
datasetClustering$cluster <- as.factor(kmeans.result$cluster)
# Create the parallel coordinate plot using 'ggparcoord'
p <- ggparcoord(data = datasetClustering,
columns = c("Platform", "Genre", "NA_Sales", "EU_Sales", "Other_Sales"),
groupColumn = "cluster",
scale = "std",
showPoints = TRUE, # To show points on the lines
alphaLines = 0.3) + # Adjust line transparency to match the image
scale_color_manual(values = colors) + # Use the custom colors
theme_minimal() + # Use a minimal theme for a clean look
labs(x = "Category",
y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data") +
theme(legend.position = "right") # Adjust the legend position if needed
library(GGally)
library(plotly)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Apply the first clustering result to your dataset
datasetClustering$cluster <- as.factor(kmeans.result$cluster)
# Create the parallel coordinate plot using 'ggparcoord'
p <- ggparcoord(data = datasetClustering,
columns = c(1:6),
groupColumn = "cluster",
scale = "std",
showPoints = TRUE, # To show points on the lines
alphaLines = 0.3) + # Adjust line transparency to match the image
scale_color_manual(values = colors) + # Use the custom colors
theme_minimal() + # Use a minimal theme for a clean look
labs(x = "Category",
y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data") +
theme(legend.position = "right") # Adjust the legend position if needed
datasetClustering1<-datasetClustering
View(datasetClustering1)
library(GGally)
library(plotly)
datasetClustering1<-datasetClustering
View(datasetClustering1)
datasetClustering1$Platform <- as.factor(datasetClustering1$Platform)
datasetClustering1$Genre <- as.factor(datasetClustering1$Genre)
datasetClustering1$NA_Sales <- as.factor(datasetClustering1$NA_Sales)
datasetClustering1$EU_Sales <- as.factor(datasetClustering1$EU_Sales)
datasetClustering1$Other_Sales <- as.factor(datasetClustering1$Other_Sales)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Apply the first clustering result to your dataset
datasetClustering1$cluster <- as.factor(kmeans.result$cluster)
# Create the parallel coordinate plot using 'ggparcoord'
p <- ggparcoord(data = datasetClustering1,
columns = c(1:6),
groupColumn = "cluster",
scale = "std",
showPoints = TRUE, # To show points on the lines
alphaLines = 0.3) + # Adjust line transparency to match the image
scale_color_manual(values = colors) + # Use the custom colors
theme_minimal() + # Use a minimal theme for a clean look
labs(x = "Category",
y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data") +
theme(legend.position = "right") # Adjust the legend position if needed
library(GGally)
library(plotly)
datasetClustering1<-datasetClustering
View(datasetClustering1)
datasetClustering1$Platform <- as.factor(datasetClustering1$Platform)
datasetClustering1$Genre <- as.factor(datasetClustering1$Genre)
datasetClustering1$NA_Sales <- as.factor(datasetClustering1$NA_Sales)
datasetClustering1$EU_Sales <- as.factor(datasetClustering1$EU_Sales)
datasetClustering1$Other_Sales <- as.factor(datasetClustering1$Other_Sales)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
# Apply the first clustering result to your dataset
datasetClustering1$cluster <- as.factor(kmeans.result$cluster)
# Create the parallel coordinate plot using 'ggparcoord'
p <- ggparcoord(data = datasetClustering1,
columns = c(2:6),
groupColumn = "cluster",
scale = "std",
showPoints = TRUE, # To show points on the lines
alphaLines = 0.3) + # Adjust line transparency to match the image
scale_color_manual(values = colors) + # Use the custom colors
theme_minimal() + # Use a minimal theme for a clean look
labs(x = "Category",
y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data") +
theme(legend.position = "right") # Adjust the legend position if needed
library(GGally)
library(plotly)
datasetClustering1<-datasetClustering
View(datasetClustering1)
datasetClustering1$Platform <- as.factor(datasetClustering1$Platform)
datasetClustering1$Genre <- as.factor(datasetClustering1$Genre)
datasetClustering1$NA_Sales <- as.factor(datasetClustering1$NA_Sales)
datasetClustering1$EU_Sales <- as.factor(datasetClustering1$EU_Sales)
datasetClustering1$Other_Sales <- as.factor(datasetClustering1$Other_Sales)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
datasetClustering1$cluster <- as.factor(kmeans.result$cluster)
p <- ggparcoord(data = datasetClustering1, columns = c(2:6), groupColumn = "cluster", scale = "std") + labs(x = "milk constituent",  y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data")
library(GGally)
library(plotly)
datasetClustering1<-datasetClustering
View(datasetClustering1)
datasetClustering1$Platform <- as.factor(datasetClustering1$Platform)
datasetClustering1$Genre <- as.factor(datasetClustering1$Genre)
datasetClustering1$NA_Sales <- as.factor(datasetClustering1$NA_Sales)
datasetClustering1$EU_Sales <- as.factor(datasetClustering1$EU_Sales)
datasetClustering1$Other_Sales <- as.factor(datasetClustering1$Other_Sales)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
datasetClustering1$cluster <- as.factor(kmeans.result$cluster)
p <- ggparcoord(data = datasetClustering1, columns = c(1:6), groupColumn = "cluster", scale = "std") + labs(x = "milk constituent",  y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data")
library(GGally)
library(plotly)
datasetClustering1<-datasetClustering
View(datasetClustering1)
# Assuming your dataset is named 'datasetClustering'
# Convert numeric columns to factors
datasetClustering$Platform <- factor(datasetClustering$Platform)
datasetClustering$Genre <- factor(datasetClustering$Genre)
datasetClustering$NA_Sales <- factor(datasetClustering$NA_Sales)
datasetClustering$EU_Sales <- factor(datasetClustering$EU_Sales)
datasetClustering$Other_Sales <- factor(datasetClustering$Other_Sales)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
datasetClustering1$cluster <- as.factor(kmeans.result$cluster)
p <- ggparcoord(data = datasetClustering1, columns = c(1:6), groupColumn = "cluster", scale = "std") + labs(x = "milk constituent",  y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data")
library(GGally)
library(plotly)
datasetClustering1<-datasetClustering
View(datasetClustering1)
# Assuming your dataset is named 'datasetClustering'
# Convert numeric columns to factors
datasetClustering$Platform <- factor(datasetClustering$Platform)
datasetClustering$Genre <- factor(datasetClustering$Genre)
datasetClustering$NA_Sales <- factor(datasetClustering$NA_Sales)
datasetClustering$EU_Sales <- factor(datasetClustering$EU_Sales)
datasetClustering$Other_Sales <- factor(datasetClustering$Other_Sales)
# Set up the colors you want to use for your clusters. Adjust as needed.
colors <- c("#E41A1C", "#377EB8", "#4DAF4A")
datasetClustering1$cluster <- as.factor(kmeans.result$cluster)
p <- ggparcoord(data = datasetClustering1, columns = c(2:6), groupColumn = "cluster", scale = "std") + labs(x = "milk constituent",  y = "Value (in standard-deviation units)",
title = "Clustering Result for Video Game Sales Data")
kmeans1 <- kmeans(datasetClustering, centers = 3, nstart = 25)
kmeans2 <- kmeans(datasetClustering, centers = 4, nstart = 25)
kmeans3 <- kmeans(datasetClustering, centers = 6, nstart = 25)
p2 <- fviz_cluster(kmeans1, geom = "point", data = datasetClustering) + ggtitle(" K = 3")
library(factoextra)
kmeans1 <- kmeans(datasetClustering, centers = 3, nstart = 25)
kmeans2 <- kmeans(datasetClustering, centers = 4, nstart = 25)
kmeans3 <- kmeans(datasetClustering, centers = 6, nstart = 25)
p2 <- fviz_cluster(kmeans1, geom = "point", data = datasetClustering) + ggtitle(" K = 3")
library(factoextra)
kmeansruns.result <- kmeansruns(datasetClustering)
install.packages("fpc")
library(fpc)
#kmeansruns() : It calls  kmeans() to perform  k-means clustering
#It initializes the k-means algorithm several times with random points from the data set as means.
#It estimates the number of clusters by Calinski Harabasz index or average silhouette width
kmeansruns.result <- kmeansruns(USArrests)
kmeansruns.result
fviz_cluster(kmeansruns.result, data = USArrests)
install.packages("fpc")
library(fpc)
#kmeansruns() : It calls  kmeans() to perform  k-means clustering
#It initializes the k-means algorithm several times with random points from the data set as means.
#It estimates the number of clusters by Calinski Harabasz index or average silhouette width
kmeansruns.result <- kmeansruns(datasetClustering)
