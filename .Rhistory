library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
#Balancing
dataset[,7:10]=dataAfterDiscertize[,1:4]
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
datasetClustering<- dataset
View(datasetClustering)
levels(dataset$NA_Sales)<-c("low","medium","high")
levels(dataset$EU_Sales)<-c("low","medium","high")
levels(dataset$Other_Sales)<-c("low","medium","high")
levels(dataset$Global_Sales)<-c("low","medium","high")
print(dataset)
#Discritization
dataBeforDiscertize=(dataset[,7:10])
View(dataset)
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
#Balancing
dataset[,7:10]=dataAfterDiscertize[,1:4]
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
datasetClustering<- dataset
View(datasetClustering)
levels(dataset$NA_Sales)<-c("low","medium","high")
levels(dataset$EU_Sales)<-c("low","medium","high")
levels(dataset$Other_Sales)<-c("low","medium","high")
levels(dataset$Global_Sales)<-c("low","medium","high")
library(outliers)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(mlbench)
library(caret)
library(factoextra)
library(cluster)
options(max.print=9999999)
dataset=read.csv("Dataset/vgsales.csv")
dataset=read.csv("Dataset/vgsales.csv")
nrow(dataset)
ncol(dataset)
dim(dataset)
names(dataset)
str(dataset)
head(dataset, 10)
tail(dataset, 10)
summary(dataset)
var(dataset$NA_Sales)
var(dataset$EU_Sales)
var(dataset$JP_Sales)
var(dataset$Other_Sales)
var(dataset$Global_Sales)
dataset2 <- dataset %>% sample_n(50)
tab <- dataset2$Platform %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100
txt <- paste0(names(tab), '\n', precentages, '%')
pie(tab, labels=txt , main = "Pie chart of Platform")
# coloring barplot and adding text
tab<-dataset$Genre %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Genre %>% table() %>% barplot(axisnames=F, main = "Barplot for Popular genres ",ylab='count',col=c('pink','blue','lightblue','green','lightgreen','red','orange','red','grey','yellow','azure','olivedrab'))
text(bb,tab/2,labels=txt,cex=1.5)
boxplot(dataset$NA_Sales , main="
BoxPlot for NA_Sales")
boxplot(dataset$EU_Sales, main="
BoxPlot for EU_Sales")
boxplot(dataset$JP_Sales , main="
BoxPlot for JP_Sales")
boxplot(dataset$Other_Sales , main="
BoxPlot for Other_Sales")
boxplot(dataset$Global_Sales , main="BoxPlot for Global_Sales")
qplot(data = dataset, x=Global_Sales,y=Genre,fill=I("yellow"),width=0.5 ,geom = "boxplot" , main = "BoxPlots for genre and Global_Sales")
dataset$Year %>% table() %>% barplot( main = "Barplot for year")
pairs(~NA_Sales + EU_Sales + JP_Sales + Other_Sales + Global_Sales, data = dataset,
main = "Sales Scatterplot")
dataset$Rank=as.character(dataset$Rank)
dataset$Rank=as.character(dataset$Rank)
sum(is.na(dataset$Rank))
NullRank<-dataset[dataset$Rank=="N/A",]
NullRank
sum(is.na(dataset$Name))
NullName<-dataset[dataset$Name=="N/A",]
NullName
sum(is.na(dataset$Platform))
NullPlatform<-dataset[dataset$Platform=="N/A",]
sum(is.na(dataset$Year))
NullYear<-dataset[dataset$Year=="N/A",]
NullYear
sum(is.na(dataset$Genre))
NullGenre<-dataset[dataset$Genre=="N/A",]
NullGenre
sum(is.na(dataset$Publisher))
NullPublisher<-dataset[dataset$Publisher=="N/A",]
NullPublisher
sum(is.na(dataset$NA_Sales))
NullNA_Sales<-dataset[dataset$NA_Sales=="N/A",]
NullNA_Sales
sum(is.na(dataset$EU_Sales))
NullEU_Sales<-dataset[dataset$EU_Sales=="N/A",]
NullEU_Sales
sum(is.na(dataset$JP_Sales))
NullJP_Sales<-dataset[dataset$JP_Sales=="N/A",]
NullJP_Sales
sum(is.na(dataset$Other_Sales))
NullOther_Sales<-dataset[dataset$Other_Sales=="N/A",]
sum(is.na(dataset$Global_Sales))
NullGlobal_Sales<-dataset[dataset$Global_Saless=="N/A",]
dataset$Platform=factor(dataset$Platform,levels=c("2600","3DO","3DS","DC","DS","GB","GBA","GC","GEN","GG","N64","NES","NG","PC","PCFX","PS","PS2","PS3","PS4","PSP","PSV","SAT","SCD","SNES","TG16","Wii","WiiU","WS","X360","XB","XOne"), labels=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
dataset$Genre=factor(dataset$Genre,levels=c("Action","Adventure","Fighting","Platform","Puzzle","Racing","Role-Playing","Shooter","Simulation","Sports","Strategy","Misc"),labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
OutNA_Sales = outlier(dataset$NA_Sales, logical =TRUE)
sum(OutNA_Sales)
Find_outlier = which(OutNA_Sales ==TRUE, arr.ind = TRUE)
OutEU_Sales = outlier(dataset$EU_Sales, logical =TRUE)
sum(OutEU_Sales)
Find_outlier = which(OutEU_Sales ==TRUE, arr.ind = TRUE)
OutJP_Sales = outlier(dataset$JP_Sales, logical =TRUE)
sum(OutJP_Sales)
Find_outlier = which(OutJP_Sales ==TRUE, arr.ind = TRUE)
OutOS=outlier(dataset$Other_Sales, logical=TRUE)
sum(OutOS)
Find_outlier=which(OutOS==TRUE, arr.ind=TRUE)
OutGS=outlier(dataset$Global_Sales, logical=TRUE)
sum(OutGS)
Find_outlier=which(OutGS==TRUE, arr.ind=TRUE)
dataset= dataset[-Find_outlier,]
datsetWithoutNormalization<-dataset
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
dataset$NA_Sales<-normalize(datsetWithoutNormalization$NA_Sales)
dataset$EU_Sales<-normalize(datsetWithoutNormalization$EU_Sales)
dataset$JP_Sales<-normalize(datsetWithoutNormalization$JP_Sales)
dataset$Other_Sales<-normalize(datsetWithoutNormalization$Other_Sales)
dataset$Global_Sales<-normalize(datsetWithoutNormalization$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- data.frame(cbind(variable = rownames(roc_imp), score = roc_imp[,1]))
roc_imp$score <- as.double(roc_imp$score)
roc_imp[order(roc_imp$score,decreasing = TRUE),]
#Discritization
dataBeforDiscertize=(dataset[,7:10])
View(dataset)
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
#Balancing
dataset[,7:10]=dataAfterDiscertize[,1:4]
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
datasetClustering<- dataset
View(datasetClustering)
levels(dataset$NA_Sales)<-c("low","medium","high")
levels(dataset$EU_Sales)<-c("low","medium","high")
levels(dataset$Other_Sales)<-c("low","medium","high")
levels(dataset$Global_Sales)<-c("low","medium","high")
#Discritization
dataBeforDiscertize=(dataset[,7:10])
View(dataset)
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
#Balancing
dataset[,7:10]=dataAfterDiscertize[,1:4]
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
datasetClustering<- dataset
View(datasetClustering)
levels(dataset$NA_Sales)<-c("low","medium","high")
levels(dataset$EU_Sales)<-c("low","medium","high")
levels(dataset$Other_Sales)<-c("low","medium","high")
levels(dataset$Global_Sales)<-c("low","medium","high")
library(outliers)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(mlbench)
library(caret)
library(factoextra)
library(cluster)
options(max.print=9999999)
dataset=read.csv("Dataset/vgsales.csv")
nrow(dataset)
ncol(dataset)
dim(dataset)
names(dataset)
library(outliers)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(mlbench)
library(caret)
library(factoextra)
library(cluster)
options(max.print=9999999)
dataset=read.csv("Dataset/vgsales.csv")
dataset=read.csv("Dataset/vgsales.csv")
nrow(dataset)
ncol(dataset)
dim(dataset)
names(dataset)
str(dataset)
head(dataset, 10)
tail(dataset, 10)
summary(dataset)
var(dataset$NA_Sales)
var(dataset$EU_Sales)
var(dataset$JP_Sales)
var(dataset$Other_Sales)
var(dataset$Global_Sales)
dataset2 <- dataset %>% sample_n(50)
tab <- dataset2$Platform %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100
txt <- paste0(names(tab), '\n', precentages, '%')
pie(tab, labels=txt , main = "Pie chart of Platform")
# coloring barplot and adding text
tab<-dataset$Genre %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Genre %>% table() %>% barplot(axisnames=F, main = "Barplot for Popular genres ",ylab='count',col=c('pink','blue','lightblue','green','lightgreen','red','orange','red','grey','yellow','azure','olivedrab'))
text(bb,tab/2,labels=txt,cex=1.5)
boxplot(dataset$NA_Sales , main="
BoxPlot for NA_Sales")
boxplot(dataset$EU_Sales, main="
BoxPlot for EU_Sales")
boxplot(dataset$JP_Sales , main="
BoxPlot for JP_Sales")
boxplot(dataset$Other_Sales , main="
BoxPlot for Other_Sales")
boxplot(dataset$Global_Sales , main="BoxPlot for Global_Sales")
qplot(data = dataset, x=Global_Sales,y=Genre,fill=I("yellow"),width=0.5 ,geom = "boxplot" , main = "BoxPlots for genre and Global_Sales")
dataset$Year %>% table() %>% barplot( main = "Barplot for year")
pairs(~NA_Sales + EU_Sales + JP_Sales + Other_Sales + Global_Sales, data = dataset,
main = "Sales Scatterplot")
dataset$Rank=as.character(dataset$Rank)
dataset$Rank=as.character(dataset$Rank)
sum(is.na(dataset$Rank))
NullRank<-dataset[dataset$Rank=="N/A",]
NullRank
sum(is.na(dataset$Name))
NullName<-dataset[dataset$Name=="N/A",]
NullName
sum(is.na(dataset$Platform))
NullPlatform<-dataset[dataset$Platform=="N/A",]
sum(is.na(dataset$Year))
NullYear<-dataset[dataset$Year=="N/A",]
NullYear
sum(is.na(dataset$Genre))
NullGenre<-dataset[dataset$Genre=="N/A",]
NullGenre
sum(is.na(dataset$Publisher))
NullPublisher<-dataset[dataset$Publisher=="N/A",]
NullPublisher
sum(is.na(dataset$NA_Sales))
NullNA_Sales<-dataset[dataset$NA_Sales=="N/A",]
NullNA_Sales
sum(is.na(dataset$EU_Sales))
NullEU_Sales<-dataset[dataset$EU_Sales=="N/A",]
NullEU_Sales
sum(is.na(dataset$JP_Sales))
NullJP_Sales<-dataset[dataset$JP_Sales=="N/A",]
NullJP_Sales
sum(is.na(dataset$Other_Sales))
NullOther_Sales<-dataset[dataset$Other_Sales=="N/A",]
sum(is.na(dataset$Global_Sales))
NullGlobal_Sales<-dataset[dataset$Global_Saless=="N/A",]
dataset$Platform=factor(dataset$Platform,levels=c("2600","3DO","3DS","DC","DS","GB","GBA","GC","GEN","GG","N64","NES","NG","PC","PCFX","PS","PS2","PS3","PS4","PSP","PSV","SAT","SCD","SNES","TG16","Wii","WiiU","WS","X360","XB","XOne"), labels=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
dataset$Genre=factor(dataset$Genre,levels=c("Action","Adventure","Fighting","Platform","Puzzle","Racing","Role-Playing","Shooter","Simulation","Sports","Strategy","Misc"),labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
OutNA_Sales = outlier(dataset$NA_Sales, logical =TRUE)
sum(OutNA_Sales)
Find_outlier = which(OutNA_Sales ==TRUE, arr.ind = TRUE)
OutEU_Sales = outlier(dataset$EU_Sales, logical =TRUE)
sum(OutEU_Sales)
Find_outlier = which(OutEU_Sales ==TRUE, arr.ind = TRUE)
OutJP_Sales = outlier(dataset$JP_Sales, logical =TRUE)
sum(OutJP_Sales)
Find_outlier = which(OutJP_Sales ==TRUE, arr.ind = TRUE)
OutOS=outlier(dataset$Other_Sales, logical=TRUE)
sum(OutOS)
Find_outlier=which(OutOS==TRUE, arr.ind=TRUE)
OutGS=outlier(dataset$Global_Sales, logical=TRUE)
sum(OutGS)
Find_outlier=which(OutGS==TRUE, arr.ind=TRUE)
dataset= dataset[-Find_outlier,]
datsetWithoutNormalization<-dataset
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
dataset$NA_Sales<-normalize(datsetWithoutNormalization$NA_Sales)
dataset$EU_Sales<-normalize(datsetWithoutNormalization$EU_Sales)
dataset$JP_Sales<-normalize(datsetWithoutNormalization$JP_Sales)
dataset$Other_Sales<-normalize(datsetWithoutNormalization$Other_Sales)
dataset$Global_Sales<-normalize(datsetWithoutNormalization$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- data.frame(cbind(variable = rownames(roc_imp), score = roc_imp[,1]))
roc_imp$score <- as.double(roc_imp$score)
roc_imp[order(roc_imp$score,decreasing = TRUE),]
dataset<- dataset[,-9]
#Discritization
dataBeforDiscertize=(dataset[,7:10])
View(dataset)
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
#Balancing
dataset[,7:10]=dataAfterDiscertize[,1:4]
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
datasetClustering<- dataset
View(datasetClustering)
levels(dataset$NA_Sales)<-c("low","medium","high")
levels(dataset$EU_Sales)<-c("low","medium","high")
levels(dataset$Other_Sales)<-c("low","medium","high")
levels(dataset$Global_Sales)<-c("low","medium","high")
print(dataset)
# We stored the class label in a varible just in case of further need(We need it to compute Bcubed precision and recall)
classLabel<-dataset$Global_Sales
# Removing the classLabel before the clustring process
datasetClustering<- datasetClustering[,-10]
# We removed columns that are not relevant to the clustering process and can distort the result
datasetClustering <- datasetClustering[, setdiff(3:9, c(4, 6))]
View(datasetClustering)
##converting factors to numric to apply kmeans method , it's essential to convert factor variables to numeric ones due to the algorithmic requirements of K-means and the characteristics of factor variables.
datasetClustering$Platform <- as.numeric(as.character(datasetClustering$Platform))
datasetClustering$Genre <- as.numeric(as.character(datasetClustering$Genre))
View(datasetClustering)
# We removed columns that are not relevant to the clustering process and can distort the result
datasetClustering <- datasetClustering[, setdiff(3:9, c(4, 6))]
# Removing the classLabel before the clustring process
datasetClustering<- datasetClustering[,-10]
library(outliers)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(mlbench)
library(caret)
library(factoextra)
library(cluster)
options(max.print=9999999)
dataset=read.csv("Dataset/vgsales.csv")
nrow(dataset)
ncol(dataset)
dim(dataset)
names(dataset)
str(dataset)
head(dataset, 10)
tail(dataset, 10)
summary(dataset)
var(dataset$NA_Sales)
var(dataset$EU_Sales)
var(dataset$JP_Sales)
var(dataset$Other_Sales)
var(dataset$Global_Sales)
dataset2 <- dataset %>% sample_n(50)
tab <- dataset2$Platform %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100
txt <- paste0(names(tab), '\n', precentages, '%')
pie(tab, labels=txt , main = "Pie chart of Platform")
# coloring barplot and adding text
tab<-dataset$Genre %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Genre %>% table() %>% barplot(axisnames=F, main = "Barplot for Popular genres ",ylab='count',col=c('pink','blue','lightblue','green','lightgreen','red','orange','red','grey','yellow','azure','olivedrab'))
text(bb,tab/2,labels=txt,cex=1.5)
boxplot(dataset$NA_Sales , main="
BoxPlot for NA_Sales")
boxplot(dataset$EU_Sales, main="
BoxPlot for EU_Sales")
boxplot(dataset$JP_Sales , main="
BoxPlot for JP_Sales")
boxplot(dataset$Other_Sales , main="
BoxPlot for Other_Sales")
boxplot(dataset$Global_Sales , main="BoxPlot for Global_Sales")
qplot(data = dataset, x=Global_Sales,y=Genre,fill=I("yellow"),width=0.5 ,geom = "boxplot" , main = "BoxPlots for genre and Global_Sales")
dataset$Year %>% table() %>% barplot( main = "Barplot for year")
pairs(~NA_Sales + EU_Sales + JP_Sales + Other_Sales + Global_Sales, data = dataset,
main = "Sales Scatterplot")
dataset$Rank=as.character(dataset$Rank)
dataset$Rank=as.character(dataset$Rank)
sum(is.na(dataset$Rank))
NullRank<-dataset[dataset$Rank=="N/A",]
NullRank
sum(is.na(dataset$Name))
NullName<-dataset[dataset$Name=="N/A",]
NullName
sum(is.na(dataset$Platform))
NullPlatform<-dataset[dataset$Platform=="N/A",]
sum(is.na(dataset$Year))
NullYear<-dataset[dataset$Year=="N/A",]
NullYear
sum(is.na(dataset$Genre))
NullGenre<-dataset[dataset$Genre=="N/A",]
NullGenre
sum(is.na(dataset$Publisher))
NullPublisher<-dataset[dataset$Publisher=="N/A",]
NullPublisher
sum(is.na(dataset$NA_Sales))
NullNA_Sales<-dataset[dataset$NA_Sales=="N/A",]
NullNA_Sales
sum(is.na(dataset$EU_Sales))
NullEU_Sales<-dataset[dataset$EU_Sales=="N/A",]
NullEU_Sales
sum(is.na(dataset$JP_Sales))
NullJP_Sales<-dataset[dataset$JP_Sales=="N/A",]
NullJP_Sales
sum(is.na(dataset$Other_Sales))
NullOther_Sales<-dataset[dataset$Other_Sales=="N/A",]
sum(is.na(dataset$Global_Sales))
NullGlobal_Sales<-dataset[dataset$Global_Saless=="N/A",]
dataset$Platform=factor(dataset$Platform,levels=c("2600","3DO","3DS","DC","DS","GB","GBA","GC","GEN","GG","N64","NES","NG","PC","PCFX","PS","PS2","PS3","PS4","PSP","PSV","SAT","SCD","SNES","TG16","Wii","WiiU","WS","X360","XB","XOne"), labels=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
dataset$Genre=factor(dataset$Genre,levels=c("Action","Adventure","Fighting","Platform","Puzzle","Racing","Role-Playing","Shooter","Simulation","Sports","Strategy","Misc"),labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
OutNA_Sales = outlier(dataset$NA_Sales, logical =TRUE)
sum(OutNA_Sales)
Find_outlier = which(OutNA_Sales ==TRUE, arr.ind = TRUE)
OutEU_Sales = outlier(dataset$EU_Sales, logical =TRUE)
sum(OutEU_Sales)
Find_outlier = which(OutEU_Sales ==TRUE, arr.ind = TRUE)
OutJP_Sales = outlier(dataset$JP_Sales, logical =TRUE)
sum(OutJP_Sales)
Find_outlier = which(OutJP_Sales ==TRUE, arr.ind = TRUE)
OutOS=outlier(dataset$Other_Sales, logical=TRUE)
sum(OutOS)
Find_outlier=which(OutOS==TRUE, arr.ind=TRUE)
OutGS=outlier(dataset$Global_Sales, logical=TRUE)
sum(OutGS)
Find_outlier=which(OutGS==TRUE, arr.ind=TRUE)
dataset= dataset[-Find_outlier,]
datsetWithoutNormalization<-dataset
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
dataset$NA_Sales<-normalize(datsetWithoutNormalization$NA_Sales)
dataset$EU_Sales<-normalize(datsetWithoutNormalization$EU_Sales)
dataset$JP_Sales<-normalize(datsetWithoutNormalization$JP_Sales)
dataset$Other_Sales<-normalize(datsetWithoutNormalization$Other_Sales)
dataset$Global_Sales<-normalize(datsetWithoutNormalization$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- data.frame(cbind(variable = rownames(roc_imp), score = roc_imp[,1]))
roc_imp$score <- as.double(roc_imp$score)
roc_imp[order(roc_imp$score,decreasing = TRUE),]
dataset<- dataset[,-9]
datasetClustering<- dataset
View(datasetClustering)
dataBeforDiscertize=(dataset[,7:10])
View(dataset)
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
#Balancing
dataset[,7:10]=dataAfterDiscertize[,1:4]
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
levels(dataset$NA_Sales)<-c("low","medium","high")
levels(dataset$EU_Sales)<-c("low","medium","high")
levels(dataset$Other_Sales)<-c("low","medium","high")
levels(dataset$Global_Sales)<-c("low","medium","high")
print(dataset)
# We stored the class label in a varible just in case of further need(We need it to compute Bcubed precision and recall)
classLabel<-dataset$Global_Sales
# Removing the classLabel before the clustring process
datasetClustering<- datasetClustering[,-10]
# We removed columns that are not relevant to the clustering process and can distort the result
datasetClustering <- datasetClustering[, setdiff(3:9, c(4, 6))]
View(datasetClustering)
##converting factors to numric to apply kmeans method , it's essential to convert factor variables to numeric ones due to the algorithmic requirements of K-means and the characteristics of factor variables.
datasetClustering$Platform <- as.numeric(as.character(datasetClustering$Platform))
datasetClustering$Genre <- as.numeric(as.character(datasetClustering$Genre))
View(datasetClustering)
fviz_nbclust(datasetClustering, kmeans, method = "silhouette")+labs(subtitle = "Silhouette method")
fviz_nbclust(datasetClustering, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
fviz_nbclust(datasetClustering, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow method")
set.seed(5000)
kmeans.result <- kmeans(datasetClustering, 3)
# print the clusterng result
kmeans.result
# visualize clustering
library(factoextra)
fviz_cluster(kmeans.result, data = datasetClustering)
#average silhouette for cluster  k=3
library(cluster)
avg_sil <- silhouette(kmeans.result$cluster,dist(datasetClustering))
fviz_silhouette(avg_sil)
#Within-cluster sum of squares wss
wss <- kmeans.result$tot.withinss
print(wss)
#BCubed
kmeans_cluster <- c(kmeans.result$cluster)
ground_truth <- c(classLabel)
data <- data.frame(cluster = kmeans_cluster, label = ground_truth)
