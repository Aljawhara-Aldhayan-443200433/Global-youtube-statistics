dim(dataset)
names(dataset)
str(dataset)
head(dataset, 10)
tail(dataset, 10)
summary(dataset)
var(dataset$NA_Sales)
var(dataset$EU_Sales)
var(dataset$JP_Sales)
var(dataset$Other_Sales)
var(dataset$Global_Sales)
dataset2 <- dataset %>% sample_n(50)
tab <- dataset2$Platform %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100
txt <- paste0(names(tab), '\n', precentages, '%')
pie(tab, labels=txt , main = "Pie chart of Platform")
# coloring barplot and adding text
tab<-dataset$Genre %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Genre %>% table() %>% barplot(axisnames=F, main = "Barplot for Popular genres ",ylab='count',col=c('pink','blue','lightblue','green','lightgreen','red','orange','red','grey','yellow','azure','olivedrab'))
text(bb,tab/2,labels=txt,cex=1.5)
boxplot(dataset$NA_Sales , main="
BoxPlot for NA_Sales")
boxplot(dataset$EU_Sales, main="
BoxPlot for EU_Sales")
boxplot(dataset$JP_Sales , main="
BoxPlot for JP_Sales")
boxplot(dataset$Other_Sales , main="
BoxPlot for Other_Sales")
boxplot(dataset$Global_Sales , main="BoxPlot for Global_Sales")
qplot(data = dataset, x=Global_Sales,y=Genre,fill=I("yellow"),width=0.5 ,geom = "boxplot" , main = "BoxPlots for genre and Global_Sales")
dataset$Year %>% table() %>% barplot( main = "Barplot for year")
pairs(~NA_Sales + EU_Sales + JP_Sales + Other_Sales + Global_Sales, data = dataset,
main = "Sales Scatterplot")
dataset$Rank=as.character(dataset$Rank)
sum(is.na(dataset$Rank))
NullRank<-dataset[dataset$Rank=="N/A",]
NullRank
sum(is.na(dataset$Name))
NullName<-dataset[dataset$Name=="N/A",]
NullName
sum(is.na(dataset$Platform))
NullPlatform<-dataset[dataset$Platform=="N/A",]
sum(is.na(dataset$Year))
NullYear<-dataset[dataset$Year=="N/A",]
NullYear
sum(is.na(dataset$Other_Sales))
NullOther_Sales<-dataset[dataset$Other_Sales=="N/A",]
sum(is.na(dataset$Genre))
NullGenre<-dataset[dataset$Genre=="N/A",]
NullGenre
sum(is.na(dataset$Publisher))
NullPublisher<-dataset[dataset$Publisher=="N/A",]
NullPublisher
sum(is.na(dataset$Global_Sales))
NullGlobal_Sales<-dataset[dataset$Global_Saless=="N/A",]
# Assuming 'N/A' is a character string you want to match:
NullYearIndices <- which(dataset$Year == "N/A")
NullPublisherIndices <- which(dataset$Publisher == "N/A")
# Removing rows with 'N/A' for Year or Publisher
dataset <- dataset[-NullYearIndices, ]
dataset <- dataset[-NullPublisherIndices,]
dataset$Platform=factor(dataset$Platform,levels=c("2600","3DO","3DS","DC","DS","GB","GBA","GC","GEN","GG","N64","NES","NG","PC","PCFX","PS","PS2","PS3","PS4","PSP","PSV","SAT","SCD","SNES","TG16","Wii","WiiU","WS","X360","XB","XOne"), labels=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
dataset$Genre=factor(dataset$Genre,levels=c("Action","Adventure","Fighting","Platform","Puzzle","Racing","Role-Playing","Shooter","Simulation","Sports","Strategy","Misc"),labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
OutNA_Sales = outlier(dataset$NA_Sales, logical =TRUE)
datsetWithoutNormalization<-dataset
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
dataset$NA_Sales<-normalize(datsetWithoutNormalization$NA_Sales)
dataset$EU_Sales<-normalize(datsetWithoutNormalization$EU_Sales)
dataset$JP_Sales<-normalize(datsetWithoutNormalization$JP_Sales)
dataset$Other_Sales<-normalize(datsetWithoutNormalization$Other_Sales)
dataset$Global_Sales<-normalize(datsetWithoutNormalization$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- data.frame(cbind(variable = rownames(roc_imp), score = roc_imp[,1]))
roc_imp$score <- as.double(roc_imp$score)
roc_imp[order(roc_imp$score,decreasing = TRUE),]
dataset<- dataset[,-9]
print(dataset)
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
dataset$NA_Sales=factor(dataset$NA_Sales, levels=([0,0.000482) [0.000482,0.00386) [0.00386,1]),labels=c("not popular","normal popularity","high ppopularity")
dataset=read.csv("vgsales.csv")
library(outliers)
library(dplyr)
library(Hmisc)
library(ggplot2)
library(cowplot)
library(mlbench)
library(caret)
library(faux)
library(DataExplorer)
library(randomForest)
options(max.print=9999999)
nrow(dataset)
ncol(dataset)
dim(dataset)
names(dataset)
str(dataset)
head(dataset, 10)
tail(dataset, 10)
summary(dataset)
var(dataset$NA_Sales)
var(dataset$EU_Sales)
var(dataset$JP_Sales)
var(dataset$Other_Sales)
var(dataset$Global_Sales)
dataset2 <- dataset %>% sample_n(50)
tab <- dataset2$Platform %>% table()
precentages <- tab %>% prop.table() %>% round(3) * 100
txt <- paste0(names(tab), '\n', precentages, '%')
pie(tab, labels=txt , main = "Pie chart of Platform")
# coloring barplot and adding text
tab<-dataset$Genre %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Genre %>% table() %>% barplot(axisnames=F, main = "Barplot for Popular genres ",ylab='count',col=c('pink','blue','lightblue','green','lightgreen','red','orange','red','grey','yellow','azure','olivedrab'))
text(bb,tab/2,labels=txt,cex=1.5)
boxplot(dataset$NA_Sales , main="
BoxPlot for NA_Sales")
boxplot(dataset$EU_Sales, main="
BoxPlot for EU_Sales")
boxplot(dataset$JP_Sales , main="
BoxPlot for JP_Sales")
boxplot(dataset$Other_Sales , main="
BoxPlot for Other_Sales")
boxplot(dataset$Global_Sales , main="BoxPlot for Global_Sales")
qplot(data = dataset, x=Global_Sales,y=Genre,fill=I("yellow"),width=0.5 ,geom = "boxplot" , main = "BoxPlots for genre and Global_Sales")
dataset$Year %>% table() %>% barplot( main = "Barplot for year")
pairs(~NA_Sales + EU_Sales + JP_Sales + Other_Sales + Global_Sales, data = dataset,
main = "Sales Scatterplot")
dataset$Rank=as.character(dataset$Rank)
sum(is.na(dataset$Rank))
NullRank<-dataset[dataset$Rank=="N/A",]
NullRank
sum(is.na(dataset$Name))
NullName<-dataset[dataset$Name=="N/A",]
NullName
sum(is.na(dataset$Platform))
NullPlatform<-dataset[dataset$Platform=="N/A",]
sum(is.na(dataset$Year))
NullYear<-dataset[dataset$Year=="N/A",]
NullYear
sum(is.na(dataset$Other_Sales))
NullOther_Sales<-dataset[dataset$Other_Sales=="N/A",]
sum(is.na(dataset$Genre))
NullGenre<-dataset[dataset$Genre=="N/A",]
NullGenre
sum(is.na(dataset$Publisher))
NullPublisher<-dataset[dataset$Publisher=="N/A",]
NullPublisher
sum(is.na(dataset$Global_Sales))
NullGlobal_Sales<-dataset[dataset$Global_Saless=="N/A",]
# Assuming 'N/A' is a character string you want to match:
NullYearIndices <- which(dataset$Year == "N/A")
NullPublisherIndices <- which(dataset$Publisher == "N/A")
# Removing rows with 'N/A' for Year or Publisher
dataset <- dataset[-NullYearIndices, ]
dataset <- dataset[-NullPublisherIndices,]
dataset$Platform=factor(dataset$Platform,levels=c("2600","3DO","3DS","DC","DS","GB","GBA","GC","GEN","GG","N64","NES","NG","PC","PCFX","PS","PS2","PS3","PS4","PSP","PSV","SAT","SCD","SNES","TG16","Wii","WiiU","WS","X360","XB","XOne"), labels=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31))
dataset$Genre=factor(dataset$Genre,levels=c("Action","Adventure","Fighting","Platform","Puzzle","Racing","Role-Playing","Shooter","Simulation","Sports","Strategy","Misc"),labels=c(1,2,3,4,5,6,7,8,9,10,11,12))
OutNA_Sales = outlier(dataset$NA_Sales, logical =TRUE)
datsetWithoutNormalization<-dataset
normalize <- function(x) {return ((x - min(x)) / (max(x) - min(x)))}
dataset$NA_Sales<-normalize(datsetWithoutNormalization$NA_Sales)
dataset$EU_Sales<-normalize(datsetWithoutNormalization$EU_Sales)
dataset$JP_Sales<-normalize(datsetWithoutNormalization$JP_Sales)
dataset$Other_Sales<-normalize(datsetWithoutNormalization$Other_Sales)
dataset$Global_Sales<-normalize(datsetWithoutNormalization$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- filterVarImp(x = dataset[,7:10], y = dataset$Global_Sales)
roc_imp <- data.frame(cbind(variable = rownames(roc_imp), score = roc_imp[,1]))
roc_imp$score <- as.double(roc_imp$score)
roc_imp[order(roc_imp$score,decreasing = TRUE),]
dataset<- dataset[,-9]
print(dataset)
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
get_Label(dataAfterDiscertize$NA_Sales)
install.packages("labelVector")
library("labelVector")
get_Label(dataAfterDiscertize$NA_Sales)
get_label(dataAfterDiscertize$NA_Sales)
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
set_label(dataAfterDiscertize$NA_Sales,"[0.00386,1]"="low","[0.000482,0.00386)"="medium","[0,0.000482)"="high")
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
dataAfterDiscertize$NA_Sales=factor(dataAfterDiscertize$NA_Sales,levels=c(0.00386,0.000482,0.00386) labels=c("low","medium","high"))
View(dataAfterDiscertize)
levels(dataAfterDiscertize$NA_Sales)<-c("low","medium","high")
View(dataAfterDiscertize)
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
View(dataAfterDiscertize)
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
levels(dataAfterDiscertize$NA_Sales)<-c("low","medium","high")
levels(dataAfterDiscertize$EU_Sales)<-c("low","high")
levels(dataAfterDiscertize$Other_Sales)<-c("low","high")
levels(dataAfterDiscertize$Gloabl_Sales)<-c("low","medium","high")
View(dataAfterDiscertize)
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
levels(dataAfterDiscertize$NA_Sales)<-c("low","medium","high")
levels(dataAfterDiscertize$EU_Sales)<-c("low","high")
levels(dataAfterDiscertize$Other_Sales)<-c("low","high")
levels(dataAfterDiscertize$Gloabl_Sales)<-c("low","medium","high")
library("labelVector")
dataBeforDiscertize=(dataset[,7:10])
library("arules")
dataAfterDiscertize=discretizeDF(
dataBeforDiscertize)
unique(dataAfterDiscertize[,1])
unique(dataAfterDiscertize[,2])
unique(dataAfterDiscertize[,3])
unique(dataAfterDiscertize[,4])
levels(dataAfterDiscertize$NA_Sales)<-c("low","medium","high")
levels(dataAfterDiscertize$EU_Sales)<-c("low","high")
levels(dataAfterDiscertize$Other_Sales)<-c("low","high")
levels(dataAfterDiscertize$Global_Sales)<-c("low","medium","high")
dataset[,7:10]<-dataAfterDiscertize
with(dataset,{print(table(NA_Sales));
print(table(EU_Sales));
print(table(Other_Sales));
print(table(Global_Sales));
})
tab<-dataset$NA_Sales %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$NA_Sales %>% table() %>% barplot(axisnames=F, main = "Barplot of NA_Sales imbalance ",ylab='count',col=rainbow(3))
text(bb,tab/2,labels=txt,cex=1.5)
tab<-dataset$EU_Sales %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$EU_Sales %>% table() %>% barplot(axisnames=F, main = "Barplot of EU_Sales imbalance ",ylab='count',col=rainbow(2))
text(bb,tab/2,labels=txt,cex=1.5)
tab<-dataset$Other_Sales %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Other_Sales %>% table() %>% barplot(axisnames=F, main = "Barplot of Other_Sales imbalance ",ylab='count',col=rainbow(2))
text(bb,tab/2,labels=txt,cex=1.5)
tab<-dataset$Global_Sales %>% table()
precentages<-tab %>% prop.table() %>% round(3)*100
txt<-paste0(names(tab), '\n',precentages,'%')
bb <- dataset$Global_Sales %>% table() %>% barplot(axisnames=F, main = "Barplot of Global_Sales imbalance ",ylab='count',col=rainbow(3))
text(bb,tab/2,labels=txt,cex=1.5)
library(groupdata2)
dataset<-downsample(dataset,cat_col="Global_Sales")
set.seed(15687)
sample<-sample.int(n=nrow(dataset),size=floor(0.9*nrow(dataset)), replace=F)
trainCart90<-dataset[sample,]
testCart10<-dataset[-sample,]
trainCart90<-trainCart90[,c(7:10)]
testCart10<-testCart10[,c(7:10)]
library(rpart)
library(rpart.plot)
Global_Sales.test=testCart10$Global_Sales
fit.tree = rpart(Global_Sales~ ., data=trainCart90, method = "class", cp=0)
fit.tree
rpart.plot(fit.tree)
fit.tree$variable.importance
pred.tree = predict(fit.tree, testCart10, type = "class")
table(pred.tree,Global_Sales.test)
printcp(fit.tree)
#Accuracy/precision/sensitivity of model is given by
accuracy90=((510+  150 + 447)/nrow(testCart10))*100
precision90=(((510/851)+(150/211)+(447/507))/3)*100
sensitivity90=(((510/512)+(150/510)+(447/547))/3)*100
specificity90=((((150+54+53+463)/1057)+((510+0+30+463)/1059)+((510+307+2+150)/1022))/3)*100
set.seed(15687)
sample<-sample.int(n=nrow(dataset),size=floor(0.8*nrow(dataset)), replace=F)
trainCart80<-dataset[sample,]
testCart20<-dataset[-sample,]
trainCart80<-trainCart80[,c(7:10)]
testCart20<-testCart20[,c(7:10)]
library(rpart)
library(rpart.plot)
Global_Sales.test=testCart20$Global_Sales
fit.tree = rpart(Global_Sales~ ., data=trainCart80, method = "class", cp=0)
fit.tree
rpart.plot(fit.tree)
fit.tree$variable.importance
pred.tree = predict(fit.tree, testCart20, type = "class")
table(pred.tree,Global_Sales.test)
printcp(fit.tree)
#Accuracy/precision/sensitivity of model is given by
accuracy80=((1033+  321 + 875)/nrow(testCart20))*100
precision80=(((1033/1688)+(321/443)+(875/1007))/3)*100
sensitivity80=(((1033/1037)+(321/1036)+(875/1065))/3)*100
specificity80=((((323+112+113+887)/2101)+((1033+1+66+887)/2102)+((1033+600+3+323)/2073))/3)*100
set.seed(15687)
sample<-sample.int(n=nrow(dataset),size=floor(0.7*nrow(dataset)), replace=F)
trainCart70<-dataset[sample,]
testCart30<-dataset[-sample,]
trainCart70<-trainCart70[,c(7:10)]
testCart30<-testCart30[,c(7:10)]
library(rpart)
library(rpart.plot)
Global_Sales.test=testCart30$Global_Sales
fit.tree = rpart(Global_Sales~ ., data=trainCart70, method = "class", cp=0)
fit.tree
rpart.plot(fit.tree)
fit.tree$variable.importance
pred.tree = predict(fit.tree, testCart30, type = "class")
table(pred.tree,Global_Sales.test)
printcp(fit.tree)
#Accuracy/precision/sensitivity of model is given by
accuracy70=((1569+  466 + 1341)/nrow(testCart30))*100
precision70=(((1569/2535)+(466/636)+(1341/1536))/3)*100
sensitivity70=(((1569/1575)+(321/1529)+(875/1603))/3)*100
specificity70=((((466+166+193+1341)/3132)+((1569+2+96+1341)/3178)+((1033+600+3+323)/3104))/3)*100
table=matrix(c(accuracy90,accuracy80,accuracy70
,precision90,precision80,precision70,
sensitivity90,sensitivity80,sensitivity70,
specificity90,specificity80,specificity70
),ncol=3,byrow=TRUE)
colnames(table)=c('90% train,10% test','80% train,20% test','70% train,30% test')
rownames(table)=c("accuracy","precision","sensitivity","specificity")
finaltable=as.table(table)
finaltable
install.packages("C50")
install.packages("C50")
library("C50")
set.seed(15687)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(0.9, 0.1))
trainData <- dataset[ind==1,]
testData <- dataset[ind==2,]
library(party)
myFormula <- Global_Sales ~  NA_Sales +EU_Sales+Other_Sales+Genre+Platform
dataset_ctree <- ctree(myFormula, data=trainData)
table(predict(dataset_ctree), trainData$Global_Sales)
print(dataset_ctree)
plot(dataset_ctree,type="simple")
plot(dataset_ctree)
testPred <- predict(dataset_ctree, newdata = testData)
result<-table(testPred, testData$Global_Sales)
result
library(e1071)
library(caret)
co_result <- confusionMatrix(result)
print(co_result)
acc90ctree <- co_result$overall["Accuracy"]
acc90ctree=acc90ctree*100
precision90ctree=(((486/808)+(243/919)+(422/974))/3)*100
sensitivity90ctree=(( 0.8764+0.4559+0.8423)/3)*100
specificity90ctree=((0.7814+0.8879+0.9128)/3)*100
set.seed(15687)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(0.8, 0.2))
trainData <- dataset[ind==1,]
testData <- dataset[ind==2,]
library(party)
myFormula <- Global_Sales ~  NA_Sales +EU_Sales+Other_Sales+Genre+Platform
dataset_ctree <- ctree(myFormula, data=trainData)
table(predict(dataset_ctree), trainData$Global_Sales)
print(dataset_ctree)
plot(dataset_ctree,type="simple")
plot(dataset_ctree)
testPred <- predict(dataset_ctree, newdata = testData)
result<-table(testPred, testData$Global_Sales)
result
library(e1071)
library(caret)
co_result <- confusionMatrix(result)
print(co_result)
acc80ctree <- co_result$overall["Accuracy"]
acc80ctree=acc80ctree*100
precision80ctree=(((838/1746)+(578/1799)+(903/1974))/3)*100
sensitivity80ctree=(( 0.7766+0.5479+ 0.8471)/3)*100
specificity80ctree=(( 0.8232+0.8387+0.9250)/3)*100
set.seed(15687)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(0.7, 0.3))
trainData <- dataset[ind==1,]
testData <- dataset[ind==2,]
library(party)
myFormula <- Global_Sales ~  NA_Sales +EU_Sales+Other_Sales+Genre+Platform
dataset_ctree <- ctree(myFormula, data=trainData)
table(predict(dataset_ctree), trainData$Global_Sales)
print(dataset_ctree)
plot(dataset_ctree,type="simple")
plot(dataset_ctree)
testPred <- predict(dataset_ctree, newdata = testData)
result<-table(testPred, testData$Global_Sales)
result
library(e1071)
library(caret)
co_result <- confusionMatrix(result)
print(co_result)
acc70ctree <- co_result$overall["Accuracy"]
acc70ctree=acc70ctree*100
precision70ctree=((( 1341/2558)+( 811/2777)+(1362/2974))/3)*100
sensitivity70ctree=((0.8268+0.5104+0.8598)/3)*100
specificity70ctree=((0.8062+0.8662+ 0.9262)/3)*100
precision70ctree=((( 1341/2558)+( 811/2777)+(1362/2974))/3)*100
sensitivity70ctree=((0.8268+0.5104+0.8598)/3)*100
specificity70ctree=((0.8062+0.8662+ 0.9262)/3)*100
table=matrix(c(acc90ctree,acc80ctree,acc70ctree
,precision90ctree,precision80ctree,precision70ctree,
sensitivity90ctree,sensitivity80ctree,sensitivity70ctree,
specificity90ctree,specificity80ctree,specificity70ctree
),ncol=3,byrow=TRUE)
colnames(table)=c('90% train,10% test','80% train,20% test','70% train,30% test')
rownames(table)=c("accuracy","precision","sensitivity","specificity")
finaltable=as.table(table)
finaltable
library(remotes)
library("C50")
library(printr)
set.seed(15687)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(0.8, 0.2))
trainData <- dataset[ind==1,]
testData <- dataset[ind==2,]
myFormula <- Global_Sales ~  NA_Sales +EU_Sales+Other_Sales+Genre+Platform
model <- C5.0(myFormula, data=trainData)
plot(model)
precision80C50=((( 912/1700)+( 541/1874)+(894/1982))/3)*100
sensitivity80C50=((0.8452+0.5128+0.8386)/3)*100
specificity80C50=((0.8015+0.8695+0.9288)/3)*100
library(remotes)
library("C50")
library(printr)
set.seed(15687)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(0.7, 0.3))
trainData <- dataset[ind==1,]
testData <- dataset[ind==2,]
myFormula <- Global_Sales ~  NA_Sales +EU_Sales+Other_Sales+Genre+Platform
model <- C5.0(myFormula, data=trainData)
plot(model)
precision70C50=((( 1331/2594)+( 828/2765)+(1368/2963))/3)*100
sensitivity70C50=(( 0.8206+0.5211+0.8636)/3)*100
specificity70C50=((0.8175+0.8624+0.9228)/3)*100
library(remotes)
library("C50")
library(printr)
set.seed(15687)
ind <- sample(2, nrow(dataset), replace=TRUE, prob=c(0.9, 0.1))
trainData <- dataset[ind==1,]
testData <- dataset[ind==2,]
myFormula <- Global_Sales ~  NA_Sales +EU_Sales+Other_Sales+Genre+Platform
model <- C5.0(myFormula, data=trainData)
plot(model)
table=matrix(c(acc90C50,acc80C50,acc70C50
,precision90C50,precision80C50,precision70C50,
sensitivity90C50,sensitivity80C50,sensitivity70C50,
specificity90C50,specificity80C50,specificity70C50
),ncol=3,byrow=TRUE)
set.seed(15687)
sample<-sample.int(n=nrow(dataset),size=floor(0.9*nrow(dataset)), replace=F)
trainCart90<-dataset[sample,]
testCart10<-dataset[-sample,]
trainCart90<-trainCart90[,c(7:10,3,5)]
testCart10<-testCart10[,c(7:10,3,5)]
library(rpart)
library(rpart.plot)
Global_Sales.test=testCart10$Global_Sales
fit.tree = rpart(Global_Sales~ ., data=trainCart90, method = "class", cp=0)
